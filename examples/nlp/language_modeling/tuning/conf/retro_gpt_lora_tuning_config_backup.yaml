name: megatron_virtual_prompt_retro

trainer:
  devices: 1
  accelerator: gpu
  num_nodes: 1
  precision: bf16
  logger: False # logger provided by exp_manager
  enable_checkpointing: False
  replace_sampler_ddp: False
  max_epochs: 3 # min 25 recommended
  max_steps: -1 # consumed_samples = global_step * micro_batch_size * data_parallel_size * accumulate_grad_batches
  log_every_n_steps: 10 # frequency with which training steps are logged
  val_check_interval: 0.5 # If is an int n > 1, will run val every n training steps, if a float 0.0 - 1.0 will run val every epoch fraction, e.g. 0.25 will run val every quarter epoch
  gradient_clip_val: 1.0
  resume_from_checkpoint: null # The path to a checkpoint file to continue the training, restores the whole state including the epoch, step, LR schedulers, apex, etc.
  # resume_from_checkpoint: /home/aficek/software/research/results/megatron_virtual_prompt_retro/2024-04-21_14-03-53/checkpoints/megatron_retro_prompt_tune--val_loss=2.459-step=18-last.ckpt
  benchmark: False

exp_manager:
  explicit_log_dir: null
  exp_dir: null
  name: ${name}
  create_wandb_logger: False
  wandb_logger_kwargs:
    project: null
    name: null
  resume_if_exists: True
  resume_ignore_no_checkpoint: True
  create_checkpoint_callback: True
  checkpoint_callback_params:
    monitor: val_loss
    save_top_k: 2
    mode: min
    save_nemo_on_train_end: False # Should be false, correct prompt learning model file is saved at model.nemo_path set below,
    filename: "megatron_retro_prompt_tune--{val_loss:.3f}-{step}"
    model_parallel_size: ${model.tensor_model_parallel_size}
    save_best_model: True
  create_early_stopping_callback: True
  early_stopping_callback_params:
    monitor: "val_loss"
    mode: "min"
    min_delta: 0.001
    patience: 30
    verbose: True
    strict: False

model:
  seed: 1234
  nemo_path: /home/aficek/software/research/results/megatron_virtual_prompt_retro.nemo # .nemo filename/absolute path to where the virtual prompt model parameters will be saved
  virtual_prompt_style: "no-prompts" # one of 'prompt-tuning', 'p-tuning', or 'inference'
  tensor_model_parallel_size: 1 # intra-layer model parallelism
  pipeline_model_parallel_size: 1 # inter-layer model parallelism
  global_batch_size: 8
  micro_batch_size: 1
  validation_global_batch_size: ${model.global_batch_size}
  validation_micro_batch_size: ${model.micro_batch_size}
  validation_drop_last: False

  # model architecture
  encoder_seq_length: 2048
  max_position_embeddings: 2048

  gradient_as_bucket_view: False # Allocate gradients in a contiguous bucket to save memory (less fragmentation and buffer memory)

  dump_debug_info: False # dump out the debug information
  dump_debug_info_to_file: False # dump out the debug information to files

  # retro architecture
  chunk_size: 64 # the chunk size used to retrive
  enc_num_layers: 4 # total number of encoder layers
  dec_num_layers: 6 # total number of decoder layers
  enc_cross_attention: [3] # layer numbers for cross attention in encoder
  dec_cross_attention: [3, 5] # layer numbers for chunked cross attention in decoder
  add_position_embedding: True # whether use the absolute position encoding

  make_vocab_size_divisible_by: 128 # Pad the vocab size to be divisible by this value for computation efficiency.
  pre_process: True # add embedding
  post_process: True # add pooler
  bert_binary_head: True # BERT binary head

  megatron_amp_O2: False # use AMP with O2 style mixed precision instead of native amp on-the-fly weight autocasting.
  grad_allreduce_chunk_size_mb: 125

  restore_from_path: null
  restore_path: null # Path to an existing p-tuned/prompt tuned .nemo model you wish to add new tasks to or run inference with
  language_model_path: ??? # Path to the RETRO language model .nemo file, always required
  save_nemo_on_validation_end: True # Saves an inference ready .nemo file every time a checkpoint is saved during training.
  existing_tasks: [] # List of tasks the model has already been p-tuned/prompt-tuned for, needed when a restore path is given
  new_tasks: ["nq"] # List of new tasknames to be prompt-tuned

  adapter_tuning:
    adapter_key: lora_kqv_adapter
    type: "parallel_adapter" # this should be either 'parallel_adapter' or 'linear_adapter'
    adapter_dim: 32
    adapter_dropout: 0.1
    norm_position: "pre" # This can be set to 'pre' or 'post', 'pre' is normally what is used.
    column_init_method: "xavier" # IGNORED if linear_adapter is used, options: xavier, zero or normal
    row_init_method: "zero" # IGNORED if linear_adapter is used, options: xavier, zero or normal
    norm_type: "mixedfusedlayernorm" # IGNORED if layer_adapter is used,  options are ['layernorm', 'mixedfusedlayernorm']

    pre_decoder: True
    post_decoder: True
    encoder: True

    pre_decoder_size: 16
    post_decoder_size: 32
    encoder_size: 64

  # tokenizer:
  #   library: 'megatron'
  #   type: 'GPT2BPETokenizer'
  #   model: null
  #   vocab_file: null
  #   merge_file: null
  #   delimiter: null # only used for tabular tokenizer

  ## Sequence Parallelism
  # Makes tensor parallelism more memory efficient for LLMs (20B+) by parallelizing layer norms and dropout sequentially
  # See Reducing Activation Recomputation in Large Transformer Models: https://arxiv.org/abs/2205.05198 for more details.
  sequence_parallel: False

  ## Activation Checkpoint
  activations_checkpoint_granularity: null # 'selective' or 'full'
  activations_checkpoint_method: null # 'uniform', 'block', not used with 'selective'
  # 'uniform' divides the total number of transformer layers and checkpoints the input activation
  # of each chunk at the specified granularity
  # 'block' checkpoints the specified number of layers per pipeline stage at the specified granularity
  activations_checkpoint_num_layers: null # not used with 'selective'

  task_templates: # Add more/replace tasks as needed, these are just examples
    - taskname: "nq" # The task name
      prompt_template: " {question} {answer}"
      # prompt_template: "User: Answer the following question with a short span. {question}\n\nAssistant: The answer is {answer}"
      total_virtual_tokens: 0 # Sum of tokens in virtual_token_splits must add to this number. Can differ between new and existing tasks, but must match across all new tasks being tuned at the same time.
      virtual_token_splits: [] # number of virtual tokens to be inserted at each VIRTUAL PROMPT location, must add to total_virtual_tokens
      truncate_field: "question" # The {field} in the prompt template whose text will be truncated if the input is too long, if null, inputs that are too long will just be skipped.
      answer_only_loss: True
      answer_field: "answer"
      prompt_template_fields: ["question", "answer"]
      chat_type: False

  prompt_tuning: # Prompt tunin specific params
    new_prompt_init_methods: ["text"] # List of 'text' or 'random', should correspond to tasks listed in new tasks
    new_prompt_init_text: ["some init text goes here"] # some init text if init method is text, or None if init method is random

  p_tuning: # P-tuning specific params
    encoder_type: "tpmlp" # ['tpmlp', 'lstm', 'biglstm', 'mlp']
    dropout: 0.0
    num_layers: 2 # number of layers for MLP or LSTM layers. Note, it has no effect for tpmlp currently as it always assumes it is two layers.
    encoder_hidden: 2048 # encoder hidden for biglstm and tpmlp
    init_std: 0.023 # init std for tpmlp layers

  data:
    train_ds: /raid/aficek/retro_paper/data/NQ/short_n10_retro.format.jsonl
    validation_ds: /raid/aficek/retro_paper/data/NQ/short_n10_retro.format.jsonl
    neighbors: 2 # number of retrieved neighbors
    retrieved_doc_len: 128 # will trim/pad retrieved doc to this length whendoing cross attention
    add_eos: True
    shuffle: True
    num_workers: 8
    pin_memory: True
    train_cache_data_path: null # the path to the train cache data
    validation_cache_data_path: null # the path to the validation cache data
    test_cache_data_path: null # the path to the test cache data
    load_cache: False # whether to load from the cache data
    max_seq_length: 1024 # filter out training and validation examples longer than 1024 tokens. Set to None will default to model's encoder length.
    min_seq_length: 1 # filter out training and validation examples less than 1 token long.

  optim:
    name: fused_adam
    lr: 1e-4
    weight_decay: 0.01
    betas:
      - 0.9
      - 0.98
    sched:
      name: CosineAnnealing
      warmup_steps: 50
      min_lr: 0.0 # min_lr must be 0.0 for prompt learning when pipeline parallel > 1
      constant_steps: 0 # Constant steps should also be 0 when min_lr=0
      monitor: val_loss
      reduce_on_plateau: false
